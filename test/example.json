{"blocks":[{"t":"Para","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"example"},{"t":"Space"},{"t":"Str","c":"input"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"here:"}]},{"t":"CodeBlock","c":[["",["haskell"],[]],"class Eq      a\n   => Compare a where\n  compare :: a -> a -> Ordering\n  (>=)    :: a -> a -> Bool"]},{"t":"Para","c":[{"t":"Str","c":"With"},{"t":"Space"},{"t":"Str","c":"extra"},{"t":"Space"},{"t":"Str","c":"space"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"break"},{"t":"Space"},{"t":"Str","c":"layout:"}]},{"t":"CodeBlock","c":[["",["haskell"],[]],"class Eq      a\n   => Compare a where\n\n\n  compare :: a -> a -> Ordering\n  (>=)    :: a -> a -> Bool"]},{"t":"Para","c":[{"t":"Str","c":"Another"},{"t":"Space"},{"t":"Str","c":"note"},{"t":"Space"},{"t":"Str","c":"on"},{"t":"Space"},{"t":"Str","c":"indent"},{"t":"Space"},{"t":"Str","c":"structure:"}]},{"t":"CodeBlock","c":[["",["haskell"],[]],"class Eq      a\n   => Compare a where\n   compare :: a -> a -> Ordering\n   (>=)    :: a -> a -> Bool"]},{"t":"Para","c":[{"t":"Str","c":"Inline"},{"t":"Space"},{"t":"Code","c":[["",[],[]],"<>"]},{"t":"Space"},{"t":"Str","c":"quote"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"here."}]},{"t":"CodeBlock","c":[["",["haskell"],[]],"test :: forall a. a -> b -> c -> d -> e\ntest = do\n  (>>=)\n  x `elem` v\n  (>=>)\n  mempty\n  bottom\n  top\n  not\n  (|)\n  (||)\n  (|>)\n  (>>)\n  (>>>)\n  (+1)\n  (+ alpha)\n  i  (//)\n  <<\n  <<<\n  -<\n  >-\n  <-\n  >=\n  <=\n  !=\n  <->\n  ->\n  =>\n  <>\n  elem\n  ~\n  ~=\n  mempty\n  a\n  b\n  c\n  d\n  f <$> x <*> y\n  f \"stringexample\"\n  eps\n  TCons\n  bot\n  undefined\n  |=>\n  |->\n  \\\\"]},{"t":"Para","c":[{"t":"Str","c":"Here"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"problematic"},{"t":"Space"},{"t":"Str","c":"class"},{"t":"Space"},{"t":"Str","c":"instance:"}]},{"t":"CodeBlock","c":[["",["haskell"],[]],"instance LessArbitrary Value where\n  lessArbitrary = cheap $$$? genericLessArbitrary\n    where\n      cheap = LessArbitrary.oneof [\n                pure       Null\n              , Bool   <$> lessArbitrary\n              , Number <$> lessArbitrary\n              ]"]}],"pandoc-api-version":[1,22],"meta":{"inline-code":{"t":"MetaInlines","c":[{"t":"Str","c":"haskell"}]},"author":{"t":"MetaInlines","c":[{"t":"Str","c":"Micha≈Ç"},{"t":"Space"},{"t":"Str","c":"J."},{"t":"Space"},{"t":"Str","c":"Gajda"}]},"header-includes":{"t":"MetaList","c":[{"t":"MetaBlocks","c":[{"t":"RawBlock","c":["tex","\\usepackage{scalerel}"]}]}]},"title":{"t":"MetaInlines","c":[{"t":"Str","c":"Running"},{"t":"Space"},{"t":"Str","c":"example"}]}}}
